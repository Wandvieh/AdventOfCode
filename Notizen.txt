

Kürzesten Weg finden

Einfachster Fall:
2 Orte, 1 Distanz
> Berechne Distanz zwischen den Orten
> Fertig

Schwierigerer Fall:
3 Orte, 3 Distanzen
> Nimm Ort a
> Entscheide dich für Punkt b oder c (nimm das erste aus der Liste)
> 2 Orte, 1 Distanz übrig; Bisherige Distanz
> Berechne Distanz zu Punkt b
> Berechne Distanz zu Punkt c
> Lösche die längste Distanz aus den bisherigen Distanzen raus
> Gib aus: Ortsliste, aktuelle Distanz

Letzte Iteration:
> Kriege Ortsliste(zwei Orte: der letzte besuchte und ein noch nicht besuchter), bisherige_Distanz, Distanzliste, Distanzmatrix
> Berechne die Distanz zwischen den beiden Orten
> Addiere sie zur bisherigen Distanz
> Subtrahiere die größte Distanz aus der Distanzliste von der bisherigen Distanz
> Vergleiche die bisherige (finale) Distanz mit der vorherigen -> Ist sie kleiner? Dann ersetze die vorherige kürzeste DIstanz mit der aktuellen bisherigen (finalen Distanz). Ersetze auch die Distanzliste
> Nächste Distanz ausmessen

Funktion Distanzberechnung (Ortsliste, bisherige_Distanz, Distanzliste, Distanzmatrix)
Annahme: Liste > 1
> Berechne Distanz zwischen ersten beiden Punkten
> aktuellen Zähler auf den nächsten Ort setzen
> Noch mehr punkte in der Liste? Dann Funktion nochmal aufrufen


def main():
> Führe Distanzberechnung durch (Ortsliste, 0, [], Distanzmatrix)